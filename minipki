#!/usr/bin/env python3

# minipki
# Author: Micah R Ledbetter
# Acknowledgements: 
# - http://sial.org/howto/openssl/ca/
# - http://www.openssl.org/docs/apps/ca.html

import sys
import os
import shutil
import argparse
import logging
import subprocess
import socket
import re
import configparser
from string import Template
import zipfile
import tempfile

scriptpath = os.path.realpath(__file__)
scriptdir = os.path.dirname(scriptpath)

defaultconfigpath = os.path.join(scriptdir, 'config.default')
for cf in [ os.path.join(os.getcwd(), 'minipki.config'),
            os.path.expanduser('~/.minipki.config'),
            os.path.join(scriptdir, 'config.local'), ]:
    if os.path.exists(cf):
        print('Using configuration file: {}'.format(cf))
        localconfigpath = cf
        break
else:
    raise Exception("Could not find local configuration file.")
            
allconfig = configparser.ConfigParser()
allconfig.read([defaultconfigpath, localconfigpath])
config = allconfig['minipki']

if config.getboolean('debug'):
    from pdb import set_trace as strace
    logging.basicConfig(level=logging.DEBUG) 
else:
    def strace(): 
        pass

def abspath(fpath):
    return os.path.abspath(os.path.expanduser(fpath))

CA_CNF = 'ca.openssl.cnf'
CA_CRT = 'ca.crt.pem'
ca_nsi_path = abspath('{}/nsis/ca.nsi'.format(scriptdir))
castub_nsi_path = abspath('{}/nsis/castub.nsi'.format(scriptdir))
ovpn_nsi_path = abspath('{}/nsis/ovpn.nsi'.format(scriptdir))

if config['vpn_pkica_path']:
    config['vpn_pkica_path'] = abspath(config['vpn_pkica_path'])

# Set up some configuration that is derivable from what the user puts in
config['output_path'] = abspath(config['output_path'])
if config['orgemail']:
    config['emailAddressLine'] = "emailAddress = " + config['orgemail']
else:
    config['emailAddressLine'] = ""

if config['dhbits']:
    config['dhfilename'] = 'dh' + config['dhbits'] + '.pem'

def is_exe(fpath):
    return os.path.exists(fpath) and os.access(fpath, os.X_OK)

def template_from_file(fname):
    rf = open(os.path.join(scriptdir, fname), 'r')
    data = rf.read()
    rf.close()
    return Template(data)

def which(program):
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None

def invoke_openssl(*opensslargs, cnfpath):
    if os.path.isfile('.rnd'):
        os.unlink('.rnd')

    invocation = [opensslbin] + list(opensslargs)
    # You can leave out RANDFILE but it gives you a dumb error when generating
    # DH params. It's supposed to use the RANDFILE entry in the openssl cnf
    # but it doesn't seem to -- only for the DH generation. ???
    environment = {"OPENSSL_CONF": cnfpath, 'RANDFILE': './.rnd'}

    logging.debug("Running command '{}' in environment '{}'".format(
        ' '.join(invocation), 
        '; '.join({'{} = {}'.format(key, environment[key]) 
            for key in environment})))
    proc = subprocess.Popen(invocation, env=environment)
    proc.wait()

    # There is no reason for this file to exist (right?)
    if os.path.isfile('.rnd'):
        os.unlink('.rnd')

def initca(pargs):
    if pargs.purge:
        for p in os.listdir("."): 
            if p == "minipki.config":
                pass
            elif os.path.isfile(p) or os.path.islink(p): 
                os.unlink(p)
            elif os.path.isdir(p):
                shutil.rmtree(p)
    else: 
        for p in ["serial.txt", "index.txt", "private", "newcerts", 
                  "certified-keys", CA_CNF]:
            if (os.path.exists(p)):
                raise Exception("Path '{}' exists, exiting...".format(p))

    fcnf=open(CA_CNF,'w')
    fcnf.write(build_ca_cnf(pargs))
    fcnf.close()

    fserial=open("serial.txt","w")
    fserial.write("01")
    fserial.close()
    open("index.txt","w").close() #create an empty file
    os.mkdir("private",0o700)
    os.mkdir("newcerts",0o700)
    os.mkdir("certified-keys",0o700)

    invoke_openssl("req", #request a new key
        "-config", CA_CNF,
        "-nodes",  # don't create an encrypted key
        "-x509", # create self-signed cert instead of a csr
        "-days", config['ca_valid_days'],
        "-out", "ca.crt.pem", 
        "-newkey", "rsa:"+config['keysize'], 
        cnfpath=CA_CNF)

def gendh(pargs):
    invoke_openssl("dhparam", "-out", config['dhfilename'], 
        config['dhbits'], cnfpath=CA_CNF)

def vpninitca(pargs):
    initca(pargs)
    gendh(pargs)


def genprivkey(pargs):
    keyname=pargs.keyname

    logging.debug("genprivkey pargs: %r" % pargs)
    if pargs.cnf: 
        if not (os.path.exists(pargs.cnf)):
            e ="Server configuration file specified on command line as "
            e+="'{}', but file does not exist".format(pargs.cnf),
            raise Exception(e)
        servercnf=pargs.cnf
    else:
        servercnf="certified-keys/"+keyname+".openssl.cnf"
        if not (os.path.exists(servercnf)):
            logging.debug("genprivkey: openssl configuration file not present, " +
                          "generating...")
            makecnf(pargs)

    invoke_openssl("genrsa", "-out", "certified-keys/"+keyname+".key", 
        config['keysize'], cnfpath=servercnf)
    invoke_openssl("req", "-new", "-nodes", "-config", servercnf, 
       "-key", "certified-keys/"+keyname+".key", 
       "-out", "certified-keys/"+keyname+".csr",
       cnfpath=servercnf)

def build_ca_cnf(pargs):
    t = template_from_file('openssl.cnf.ca.template')

    cacnf = t.substitute(ca_commonName = config['ca_common_name'],
                         emailAddressLine = config['emailAddressLine'],
                         organizationName = config['orgname'],
                         countryName = config['country'],
                         default_keysize = config['keysize'],
                         certtype = "server")
    return cacnf

def makecnf(pargs):
    """
    Write out an openssl.cnf file with the correct emailAddress field, 
    commonName field, and optional subjectAltName section
    """
    logging.debug("makecnf() arguments: %r" % pargs)

    t = template_from_file('openssl.cnf.server.template')
    if not config['certtype']:
        config['certtype'] = "server"

    # Ensure the commonName is in the subjectAltNames list, as OVPN requires
    try:
        if pargs.commonName:
            cn = pargs.commonName
        else:
            cn = pargs.keyname
    except AttributeError:
        cn = pargs.keyname
    logging.debug("cn is %r" % cn)

    # Format the subjectAltNames list like OVPN requires
    try:
        san = sorted(list(set(pargs.subjectAltName.split(" ") + [cn]))

        subjectAltNameLines = "subjectAltName = @alt_names" + "\n\n" 
        subjectAltNameLines+= "[ alt_names ]" + "\n"
        ip = []
        dns = [] 

        for entry in san:
            # test if this is an IP address by asking the socket module
            try:
                socket.inet_aton(entry)
                ip.append(entry)
            except socket.error:
                # assume it's a hostname if it fails the socket test
                dns.append(entry)

        # note that OpenSSL needs it to start with DNS.1 not DNS.0
        for i in range(0, len(dns)):
            subjectAltNameLines += "DNS.{} = {}\n".format(i+1, dns[i])
        for i in range(0, len(ip)):
            subjectAltNameLines += "IP.{} = {}\n".format(i+1, ip[i])

    except AttributeError: # there is no pargs.subjectAltName
        subjectAltNameLines = ""

    servercnf = t.substitute(keysize = config['keysize'],
                             commonName = cn,
                             countryName = config['country'],
                             emailAddressLine = config['emailAddressLine'],
                             subjectAltNameLines = subjectAltNameLines,
                                 certtype = config['certtype'])

    fcnf=open("certified-keys/"+pargs.keyname+".openssl.cnf",'w')
    fcnf.write(servercnf)
    fcnf.close()

def signcerts(pargs):
    logging.debug("signcerts() pargs: %r" % pargs)
    keyname = pargs.keyname

    invoke_openssl("ca", "-batch", "-config", CA_CNF,
       "-in",  "certified-keys/"+keyname+".csr", 
       "-out", "certified-keys/"+keyname+".cert", 
       "-days", config['server_valid_days'],
       cnfpath=CA_CNF)

def selfsign(pargs):
    logging.debug("selfsign pargs: %r" % pargs)
    # We don't use a CA so we might not have a certified-keys directory
    # TODO: clean this up, probably best to ENSURE we don't have a CA

    #fserial=open("serial.txt","w")
    #fserial.write("01")
    #fserial.close()
    #open("index.txt","w").close() #create an empty file
    os.mkdir("private",0o700)
    #os.mkdir("newcerts",0o700)
    os.mkdir("certified-keys",0o700)

    if pargs.cnf: 
        if not (os.path.exists(pargs.cnf)):
            e ="Server configuration file specified on command line as "
            e+="'{}', but file does not exist".format(pargs.cnf),
            raise Exception(e)
        servercnf=pargs.cnf
    else:
        servercnf='certified-keys/'+pargs.keyname+".openssl.cnf"
        if not (os.path.exists(servercnf)):
            d="genprivkey: openssl configuration file not present, "
            d+="generating..."
            logging.debug(d)
            makecnf(pargs)
    invoke_openssl('req','-x509','-nodes',
        '-days',config['server_valid_days'],
        '-config',servercnf,
        '-newkey','rsa:{}'.format(config['keysize']),
        '-keyout','private/'+pargs.keyname+'.key',
        '-out','certified-keys/'+pargs.keyname+'.crt',
        cnfpath=servercnf)

def gensign(pargs):
    logging.debug("gensign() pargs: %r" % pargs)
    genprivkey(pargs)
    signcerts(pargs)

def make_ovpn_zip(pargs):

    # zip files list
    zfl = {'cacrt':'ca.crt.pem', 
           'dh':config['dhfilename'],
           'crt':'certified-keys/'+pargs.keyname+'.cert',
           'key':'certified-keys/'+pargs.keyname+'.key'}

    for p in zfl:
        if not (os.path.exists(zfl[p])):
            e = "Path '{}' does not exist but is required, did ".format(zfl[p])
            e+= "you create the VPN CA and client private key and sign it?"
            raise Exception(e)

    zfl['ovpn'] = 'certified-keys/{}.ovpn'.format(config['vpnserver'])
    fovpn=open(zfl['ovpn'],'w')
    fovpn.write(build_ovpn_config(pargs))
    fovpn.close()

    zovpn=zipfile.ZipFile(pargs.ovpnzipfile_path, 'w', zipfile.ZIP_STORED)

    # write each file to the same filename minus leading directories: 
    for p in zfl:
        zovpn.write(zfl[p],
                    os.path.basename(zfl[p]))
    zovpn.close()

    if pargs.installer:
        build_ovpn_nsis_installer(pargs)

def vpngensign(pargs):
    config['certtype'] = "client"
    gensign(pargs)
    make_ovpn_zip(pargs)

def build_ovpn_config(pargs):
    t = template_from_file('client.ovpn.template')
    ovpn = t.substitute(keyname = pargs.keyname,
                        vpnserver = config['vpnserver'],
                        vpnport = config['vpnport'],
                        vpnprotocol = config['vpnprotocol'],
                        vpnremotesubnet = config['vpnremotesubnet'],
                        vpnremotenetmask = config['vpnremotenetmask'],
                        vpngateway = config['vpngateway'])

    return ovpn

def build_ovpn_nsis_installer(pargs):
    closeme = []
    if config.getboolean('vpn_pkica'):
        nsisargs=[config['makensisexe'],
                  r'/DOUTPUT_EXE={}'.format(pargs.ovpninstaller_path),
                  r'/DCONFIG_CACRT={}'.format(config['vpn_pkica_path']),
                  r'/DCONFIG_ZIP={}'.format(pargs.ovpnzipfile_path),
                  r'/DCONFIG_CAORG={}'.format(config['orgname']),
                  r'{}'.format(ovpn_nsi_path),
                  r'{}'.format(ca_nsi_path)]

    else:
        nsisargs=[config['makensisexe'],
                  r'/DOUTPUT_EXE={}'.format(pargs.ovpninstaller_path),
                  r'/DCONFIG_ZIP={}'.format(pargs.ovpnzipfile_path),
                  r'/DCONFIG_CAORG={}'.format(config['orgname']),
                  r'{}'.format(ovpn_nsi.name)]

    logging.debug("Calling makensis.exe...")
    logging.debug(nsisargs)
    subprocess.check_call(nsisargs)
            

def build_ca_nsis_installer(pargs):
    output_exe = os.path.join(config['output_path'], 'security-certificate.exe')
                                    
    cacert_path = abspath(CA_CRT)

    nsisargs=[config['makensisexe'],
              r'/DOUTPUT_EXE="{}"'.format(output_exe),
              r'/DCONFIG_CACRT="{}"'.format(cacert_path),
              r'/DCONFIG_CAORG={}'.format(config['orgname']),
              r'{}'.format(castub_nsi_path),
              r'{}'.format(ca_nsi_path)]

    subprocess.check_call(nsisargs)


def examinecsr(pargs):
    possible_csrs =  [pargs.csrfile, 
                      pargs.csrfile+".csr", 
                      "certified-keys/"+pargs.csrfile, 
                      "certified-keys/"+pargs.csrfile+".csr"]
    for p in possible_csrs:
        if os.path.exists(p):
            csrfile=p
            break
    else:
        raise Exception("No such CSR file '{}', exiting...".format(pargs.csrfile))
    invoke_openssl("req", "-in", csrfile, "-noout", "-text", cnfpath=CA_CNF)

def catools(pargs): ##BK
    if pargs.installer:
        build_ca_nsis_installer(pargs)
    if pargs.gendh:
        gendh()

def dmisc(pargs):
    if pargs.action == 'pwd':
        print(os.getcwd())
    elif pargs.action == 'scriptdir':
        print(scriptdir)
    else:
        print("Action {} not defined.".format(pargs.action))

def main(*args):
    global opensslbin
    if (os.name == 'nt'):
        opensslbin=which("openssl.exe")
        if not opensslbin:
            # check some known locations on Windows
            pf64=os.environ['ProgramFiles']
            pf32=os.environ['ProgramFiles(x86)']
            for path in [pf64+r"\GnuWin32\bin\openssl.exe",
                         pf32+r"\GnuWin32\bin\openssl.exe",
                         pf64+r"\OpenVPN\bin\openssl.exe", # Community Edition
                         pf32+r"\OpenVPN\bin\openssl.exe",
                         pf64+r"\OpenVPN Technologies\OpenVPN Client\core\openssl.exe", # Enterprise Edition
                         pf32+r"\OpenVPN Technologies\OpenVPN Client\core\openssl.exe",
                         pf64+r"\Git\bin\openssl.exe",
                         pf32+r"\Git\bin\openssl.exe"]:
                if (is_exe(path)):
                    opensslbin=path
                    break
            else:
                # if after all that we have nothing, exit
                raise Exception("Can't find OpenSSL binary.")

    elif (os.name == 'posix'):
        # for POSIX systems we're just going to assume that openssl is in the 
        # path and $EDITOR is an existing env var. 
        opensslbin=which("openssl")
        if not opensslbin:
            raise Exception("Can't find OpenSSL binary. Exiting...")

    ### ARGUMENT PARSING

    h= 'Perform basic tasks for a mini-PKI'
    argparser = argparse.ArgumentParser(description=h)
    subparsers = argparser.add_subparsers()

    ### PARENT PARSERS, which collect related arguments together
    p_keyname = argparse.ArgumentParser(add_help=False)
    h =  'Supply a keyname, such as myserver or myserver.sub.domain.tld. '
    h += 'By default, this also specifies a hostname'
    p_keyname.add_argument('keyname', type=str, action='store', help=h)

    p_commonname = argparse.ArgumentParser(add_help=False)
    h = 'Specify a hostname rather than use the keyname to use in the config '
    h+= 'file.'
    p_commonname.add_argument('--commonName', action='store', help=h)

    p_san = argparse.ArgumentParser(add_help=False)
    h = 'A list of subjectAltName entries, separated by commas, such as '
    h+= 'myserver,myserver.domain.tld,10.10.10.10 .'
    p_san.add_argument('--subjectAltName', action='store', help=h)

    p_cnf = argparse.ArgumentParser(add_help=False)
    h ='An existing openssl.cnf file. Useful if all of your server certs can '
    h+='use the same file because the commonName is optional '
    h+='(as is the case with my OpenVPN setup).'
    p_cnf.add_argument('--cnf', action='store', help=h)

    p_ovpninst = argparse.ArgumentParser(add_help=False)
    h='Build an installer .exe for the OpenVPN configuration after generating '
    h+='it. See the readme file for more information on this option. ' 
    p_ovpninst.add_argument('--installer', action='store_true', help=h)

    p_cainst = argparse.ArgumentParser(add_help=False)
    h='Build an installer .exe for the certificate authority that can be '
    h+='distributed to end users. See the readme file for more information '
    h+='on this option. ' 
    p_cainst.add_argument('--installer', action='store_true', help=h)


    ### SUB PARSERS
    
    h="Generate an openssl.cnf file for a server"
    s_makecnf = subparsers.add_parser('makecnf', help=h,
                                      parents=[p_keyname, p_commonname, p_san])
    s_makecnf.set_defaults(func=makecnf)

    s_examinecsr = subparsers.add_parser('examinecsr', 
                                         help="Examine an existing CSR")
    s_examinecsr.add_argument('csrfile', action='store', 
                              help='Supply the path to a .csr file')
    s_examinecsr.set_defaults(func=examinecsr)

    h='Generate a private key & CSR for a server'
    s_genkey = subparsers.add_parser('genkey', help=h,
                                     parents=[p_keyname, p_commonname, 
                                              p_san, p_cnf])
    s_genkey.set_defaults(func=genprivkey)
    
    h='Sign a CSR with an existing CA key'
    s_sign = subparsers.add_parser('sign', help=h, parents=[p_keyname])

    h='Both generate and sign in one step'
    s_gensign = subparsers.add_parser('gensign', help=h, 
                                      parents=[p_keyname, p_commonname, 
                                               p_san, p_cnf])
    s_gensign.set_defaults(func=gensign)

    h='Generate a self-signed certificate (without need of a CA).'
    s_selfsign = subparsers.add_parser('selfsign', help=h, 
        parents=[p_keyname, p_commonname, p_san, p_cnf])
    s_selfsign.set_defaults(func=selfsign)

    h='Create a vpn configuration from an existing signed private key, and zip '
    h+='them all up into a zipfile in ' + config['output_path'] 
    h+='/vpn-KEYNAME.zip.'
    s_vpnconfig = subparsers.add_parser('vpnconfig', help=h, 
                                        parents=[p_keyname, p_ovpninst])
    s_vpnconfig.set_defaults(func=make_ovpn_zip)

    h='Generate a VPN private key, sign it, create a VPN configuration from '
    h+='it, and zip them all up into a zipfile in ' + config['output_path']
    h+='/vpn-KEYNAME.zip.'
    s_vpngensign = subparsers.add_parser('vpngensign', help=h,
                                         parents=[p_keyname, p_ovpninst, p_cnf])
    s_vpngensign.set_defaults(func=vpngensign)

    h ='Initializa a certificate authority in this directory'
    s_initca = subparsers.add_parser('initca', help=h, parents=[p_cainst])

    h ='Initializa a certificate authority for OpenVPN in this directory'
    s_vpninitca = subparsers.add_parser('vpninitca', help=h)

    h ="Misc certificate authority tasks."
    s_ca = subparsers.add_parser('ca', help=h, parents=[p_cainst])
    g_ca = s_ca.add_mutually_exclusive_group()

    h='Generate Diffie-Hellman parameters file (required for OpenVPN)'
    g_ca.add_argument('--gendh', help=h, action='store_true')

    h='Initialize a Certificate Authority in this directory'
    g_ca.add_argument('--reinit', help=h, action='store_true')
    s_ca.set_defaults(func=catools)

    if config.getboolean('debug'):
        s_debug = subparsers.add_parser('debug', 
                                                help='Debugging options...')
        s_debug.add_argument('action', type=str, action='store')
        s_debug.set_defaults(func=dmisc)

        h='THIS OPTION WILL DELETE ALL FILES IN THE CURRENT DIRECTORY. '
        h+='It is really intended just for debugging.'
        s_initca.add_argument('--purge', action='store_true', help=h)
        s_vpninitca.add_argument('--purge', action='store_true', help=h)

    s_initca.set_defaults(func=initca)
    s_vpninitca.set_defaults(func=vpninitca)

    pargs = argparser.parse_args()

    # For convenience later on so I don't have to specify this more than once
    try: 
        if pargs.keyname:
            zfp = abspath("{}/vpn-{}.zip".format(config['output_path'], 
                                                 pargs.keyname))
            inp = abspath("{}/vpn-{}.exe".format(config['output_path'], 
                                                 pargs.keyname))
            pargs.ovpnzipfile_path = zfp
            pargs.ovpninstaller_path = inp
    except AttributeError:
        pass

    try:
        callme = pargs.func
    except AttributeError:
        print(argparser.format_help())
        sys.exit()
    pargs.func(pargs)

        

if __name__ == '__main__':
    sys.exit(main(*sys.argv))


